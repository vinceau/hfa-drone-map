{"version":3,"sources":["Map.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["mapboxgl","accessToken","process","Map","mapContainer","useRef","map","useState","lng","setLng","lat","setLat","zoom","setZoom","useEffect","current","container","style","center","on","getCenter","toFixed","getZoom","className","ref","console","log","hot","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+NAKAA,IAASC,YAAcC,gGAEhB,IAAMC,EAAgB,WAC3B,IAAMC,EAAeC,iBAAO,MACtBC,EAAWD,iBAAO,MAFS,EAGXE,oBAAU,MAHC,mBAG1BC,EAH0B,KAGrBC,EAHqB,OAIXF,mBAAS,OAJE,mBAI1BG,EAJ0B,KAIrBC,EAJqB,OAKTJ,mBAAS,GALA,mBAK1BK,EAL0B,KAKpBC,EALoB,KA0BjC,OAnBAC,qBAAU,WACJR,EAAIS,UACRT,EAAIS,QAAU,IAAIf,IAASG,IAAI,CAC7Ba,UAAWZ,EAAaW,QACxBE,MAAO,qCACPC,OAAQ,CAACV,EAAKE,GACdE,KAAMA,QAIVE,qBAAU,WACHR,EAAIS,SACTT,EAAIS,QAAQI,GAAG,QAAQ,WACrBV,EAAOH,EAAIS,QAAQK,YAAYZ,IAAIa,QAAQ,IAC3CV,EAAOL,EAAIS,QAAQK,YAAYV,IAAIW,QAAQ,IAC3CR,EAAQP,EAAIS,QAAQO,UAAUD,QAAQ,UAKxC,6BACE,yBAAKE,UAAU,WAAf,cACcf,EADd,gBACgCE,EADhC,YAC8CE,GAE9C,yBAAKY,IAAKpB,EAAcmB,UAAU,oB,OC9BxCE,QAAQC,IAAI,QADAxB,QAGZ,IASeyB,iBATO,WACpB,OACE,yBAAKJ,UAAU,OACb,6CANMrB,QAON,kBAAC,EAAD,UCFc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCTnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.b72ddcc8.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport mapboxgl from \"!mapbox-gl\";\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY as string;\n\nexport const Map: React.FC = () => {\n  const mapContainer = useRef(null);\n  const map: any = useRef(null);\n  const [lng, setLng] = useState(-70.9);\n  const [lat, setLat] = useState(42.35);\n  const [zoom, setZoom] = useState(9);\n\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current as any,\n      style: \"mapbox://styles/mapbox/streets-v11\",\n      center: [lng, lat],\n      zoom: zoom,\n    });\n  });\n\n  useEffect(() => {\n    if (!map.current) return; // wait for map to initialize\n    map.current.on(\"move\", () => {\n      setLng(map.current.getCenter().lng.toFixed(4));\n      setLat(map.current.getCenter().lat.toFixed(4));\n      setZoom(map.current.getZoom().toFixed(2));\n    });\n  });\n\n  return (\n    <div>\n      <div className=\"sidebar\">\n        Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\n      </div>\n      <div ref={mapContainer} className=\"map-container\" />\n    </div>\n  );\n};\n","import \"./App.scss\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nimport React from \"react\";\nimport { Map } from \"./Map\";\nimport { hot } from \"react-hot-loader/root\";\n\nconst env = process.env.REACT_APP_TEST_KEY;\nconsole.log(\"env: \", env);\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div>Hello world! {env}</div>\n      <Map />\n    </div>\n  );\n};\n\nexport default hot(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./index.scss\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}